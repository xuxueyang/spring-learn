AOP
JoinPoint 连接点 spring只支持方法类型的连接点

PointCut 切入点 所谓切入点是我们要对那些 连接点 进行拦截的定义

引介

Target

Weaving 织入 AspectJ采用编译器和类装载
Spring动态代理
切面：通知和代理
Proxy.newInstance
只能对接口实现增强



使用CGLIB生成代理
使用底层字节码对数据

前置通知、后置通知、MethodBeforeAdvice  MethodAfterAdvice
环绕通知 org.aopalliance.XX.MethodInterceptor
异常抛出通知ThrowsAdvice
引介通知


Advisor ： 所以方法拦截
PointCutAdvisor: 切点的切面

proxyTargetClass 对类进行代理
interceptorNames : 需要织入目标的Advice

singleton : 返回代理是不是单例,默认为单例

optimize:设置为true的时候,强制使用CGLIB

//常用的PointCutAdviosr
DefaultPointCutAdviosr:任意pointcut和advisor组合定义切面
JdkRegexpMethodPointcut构造正则表达式切点




//自动创建代理
BeanNameAutoProxyCreator    根据bean名称创建代理
    <bean class>    name="beanNames" value="*Dao"

DefaultAdvisorAutoProxyCreator 根据Advisor本身包含信息创建代理
    <property name="pattern" value="com\.ioc\.demo\.MyAroundAdvisor\.save"


AnnotationAwareAspectJAutoProxyCreator 基于bean中的AspectJ注解进行自动代理







@Pointcut为切面命名

切点方法
private void 无参方法，方法名为切点名














